Reflect: Initializing a Repository
What happens when you initialize a repository? Why do you need to do it?

  Initializing a repository is telling git, where the files are going to be for this project.

Reflect: Staging Area
How is the staging area different from the working directory and the repository? What value do you think it offers?

  The staging area gives you an opportunity review the files you are adding to the repository. It is the middle area between the working directory and the repository.

Reflect: Commit Size
How can you use the staging area to make sure you have one commit per logical change?

  You can use the staging area to commit changes logically. Once you're happy with the work you have done in the staging area, commmit it so it is saved within git, add the file to the staging area once again, and continue working.

Reflect: When to Use Branches
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

  Branches are useful when you want to maintain different versions of your project. They allow you to essentially go on a different path with your work.

Reflect: Visualizing with Diagrams
How do the diagrams help you visualize the branch structure?

  Git log history can become pretty complicated. A diagram allows you to visualize the structure more easily.

Reflect: Merging Two Branches
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

  When branches are merged, the master is updated with all the commits from the branch that got merged. This will include all the commits from the branch. You can use git show to compare a diff with its parent, if its not the master. You can use git branch -d branch_name to erase the label from the branch.

Reflect: Automatic vs. Manual Merging
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

  Git can only merge two branches if there are no conflicts in the files. It will ask you to resolve any conflicts before allowing you to merge. This is very helpful since     it makes sure you and your team are on the same page regarding changes to the code. 
